#Based on example from RISC-V Priority Kernel : https://github.com/riscv/riscv-pk/blob/master/pk/entry.S

  
# Copyright (c) 2013, The Regents of the University of California (Regents).
# All Rights Reserved.

# IN NO EVENT SHALL REGENTS BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
# SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING
# OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF REGENTS HAS
# BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# REGENTS SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE. THE SOFTWARE AND ACCOMPANYING DOCUMENTATION, IF ANY, PROVIDED
# HEREUNDER IS PROVIDED "AS IS". REGENTS HAS NO OBLIGATION TO PROVIDE
# MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.


# TODO: ADD AS REFERENCE TO FYP


#include "bits.h"

.macro save_tf
# save gprs
STORE  x1,1*REGBYTES(x2)
STORE  x3,3*REGBYTES(x2)
STORE  x4,4*REGBYTES(x2)
STORE  x5,5*REGBYTES(x2)
STORE  x6,6*REGBYTES(x2)
STORE  x7,7*REGBYTES(x2)
STORE  x8,8*REGBYTES(x2)
STORE  x9,9*REGBYTES(x2)
STORE  x10,10*REGBYTES(x2)
STORE  x11,11*REGBYTES(x2)
STORE  x12,12*REGBYTES(x2)
STORE  x13,13*REGBYTES(x2)
STORE  x14,14*REGBYTES(x2)
STORE  x15,15*REGBYTES(x2)
STORE  x16,16*REGBYTES(x2)
STORE  x17,17*REGBYTES(x2)
STORE  x18,18*REGBYTES(x2)
STORE  x19,19*REGBYTES(x2)
STORE  x20,20*REGBYTES(x2)
STORE  x21,21*REGBYTES(x2)
STORE  x22,22*REGBYTES(x2)
STORE  x23,23*REGBYTES(x2)
STORE  x24,24*REGBYTES(x2)
STORE  x25,25*REGBYTES(x2)
STORE  x26,26*REGBYTES(x2)
STORE  x27,27*REGBYTES(x2)
STORE  x28,28*REGBYTES(x2)
STORE  x29,29*REGBYTES(x2)
STORE  x30,30*REGBYTES(x2)
STORE  x31,31*REGBYTES(x2)

# get sr, epc, badvaddr, cause #AV: Only Master Mode is enabled on Taiga
csrrw  t0,mscratch,x0 #AV getting saved stack pointer from scratch reg
csrr   s0,mstatus
csrr   t1,mepc
csrr   t2,mtval
csrr   t3,mcause
STORE  t0,2*REGBYTES(x2)
STORE  s0,32*REGBYTES(x2)
STORE  t1,33*REGBYTES(x2)
STORE  t2,34*REGBYTES(x2)
STORE  t3,35*REGBYTES(x2)
1:
.endm

.text
.align 2
.global  trap_entry
trap_entry:
csrrw sp, mscratch, sp
# bnez sp, 1f
csrr sp, mscratch
addi sp,sp,-320 #AV:there is no kernel space stack pointer
save_tf
move  a0,sp
jal handle_trap

mv a0,sp
# don't restore sscratch if trap came from kernel
# andi s0,s0,SSTATUS_SPP
# bnez s0,start_user
#addi sp,sp,320 #AV: there is no kernel
# csrw sscratch,sp 

.globl start_user
start_user:
LOAD t0, 32*REGBYTES(a0)
LOAD t1, 33*REGBYTES(a0)
csrw mstatus, t0
csrw mepc, t1

# restore x registers
LOAD  x1,1*REGBYTES(a0)
LOAD  x2,2*REGBYTES(a0)
LOAD  x3,3*REGBYTES(a0)
LOAD  x4,4*REGBYTES(a0)
LOAD  x5,5*REGBYTES(a0)
LOAD  x6,6*REGBYTES(a0)
LOAD  x7,7*REGBYTES(a0)
LOAD  x8,8*REGBYTES(a0)
LOAD  x9,9*REGBYTES(a0)
LOAD  x11,11*REGBYTES(a0)
LOAD  x12,12*REGBYTES(a0)
LOAD  x13,13*REGBYTES(a0)
LOAD  x14,14*REGBYTES(a0)
LOAD  x15,15*REGBYTES(a0)
LOAD  x16,16*REGBYTES(a0)
LOAD  x17,17*REGBYTES(a0)
LOAD  x18,18*REGBYTES(a0)
LOAD  x19,19*REGBYTES(a0)
LOAD  x20,20*REGBYTES(a0)
LOAD  x21,21*REGBYTES(a0)
LOAD  x22,22*REGBYTES(a0)
LOAD  x23,23*REGBYTES(a0)
LOAD  x24,24*REGBYTES(a0)
LOAD  x25,25*REGBYTES(a0)
LOAD  x26,26*REGBYTES(a0)
LOAD  x27,27*REGBYTES(a0)
LOAD  x28,28*REGBYTES(a0)
LOAD  x29,29*REGBYTES(a0)
LOAD  x30,30*REGBYTES(a0)
LOAD  x31,31*REGBYTES(a0)
# restore a0 last
LOAD  x10,10*REGBYTES(a0)

# gtfo
mret